---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { FOOTER_CONTENT } from '../../lib/footer-content';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  // Get all fair years from CMS
  const fairYears = await getCollection('fair-years');
  
  // Create paths for each active year with custom slug
  return fairYears
    .filter(year => year.data.is_active && year.data.display_status === 'Aktif Fuarlar')
    .map(year => ({
      params: { slug: year.data.page_slug || `${year.data.year}-fuar-takvimi` },
      props: { yearData: year.data }
    }));
}

const { slug } = Astro.params;
const { yearData } = Astro.props;

const locale = 'tr';
const footerContent = FOOTER_CONTENT[locale];

// Get dynamic content
const currentYear = yearData.year;
const pageTitle = yearData.page_content?.title_tr || `${currentYear} Fuar Takvimi`;
const pageDescription = yearData.page_content?.description_tr || `${currentYear} yÄ±lÄ±nda dÃ¼nya Ã§apÄ±nda organize edeceÄŸimiz prestijli fuarlarda, TÃ¼rk firmalarÄ±nÄ± global pazarlarla buluÅŸturuyoruz.`;

console.log('ðŸŽ¯ DYNAMIC SLUG TR: Slug param:', slug);
console.log('ðŸŽ¯ DYNAMIC SLUG TR: Year:', currentYear);
console.log('ðŸŽ¯ DYNAMIC SLUG TR: Page title:', pageTitle);

// Sort fairs by order field from CMS
const cmsFairs = (yearData.fairs || []).sort((a, b) => {
  const orderA = a.settings?.order || 999; // Default high number if no order
  const orderB = b.settings?.order || 999;
  return orderA - orderB; // Sort ascending (1, 2, 3...)
});

console.log('ðŸŽ¯ FAIR SORTING: Fairs sorted by order:', 
  cmsFairs.map(fair => `${fair.basic_info?.name_tr} (order: ${fair.settings?.order || 'none'})`));

// Load team members for representative lookup
const teamMembers = await getCollection('team-members');
console.log('ðŸ‘¥ TEAM LOOKUP: Team members loaded:', teamMembers.length);

// Team member lookup function
function getTeamMemberData(memberName: string) {
  const member = teamMembers.find(m => m.data.name === memberName);
  if (member) {
    console.log('ðŸ‘¥ TEAM LOOKUP: Found member:', memberName, member.data);
    return {
      name: member.data.name,
      email: member.data.email,
      title_tr: member.data.title.tr,
      title_en: member.data.title.en,
      phone: member.data.phone || ''
    };
  }
  console.log('ðŸ‘¥ TEAM LOOKUP: Member not found:', memberName);
  return null;
}

// Convert CMS data to page format
var fairsData: Record<string, any[]> = {};
cmsFairs.forEach((fair: any) => {
  const sector = fair.basic_info.sector;
  if (!fairsData[sector]) {
    fairsData[sector] = [];
  }

  // Get representative data
  let representativeData = {
    name: '',
    title: '',
    email: '',
    phone: ''
  };

  if (fair.representative) {
    // If team_member is selected, get data from team collection
    if (fair.representative.team_member) {
      const teamMemberData = getTeamMemberData(fair.representative.team_member);
      if (teamMemberData) {
        representativeData = {
          name: teamMemberData.name,
          title: teamMemberData.title_tr,
          email: teamMemberData.email,
          phone: fair.representative.phone || teamMemberData.phone || ''
        };
        console.log('ðŸ‘¥ TEAM LOOKUP: Using team member data for:', teamMemberData.name);
      } else {
        // Fallback to manual data
        representativeData = {
          name: fair.representative.name || '',
          title: fair.representative.title_tr || '',
          email: fair.representative.email || '',
          phone: fair.representative.phone || ''
        };
      }
    } else {
      // Use manual representative data
      representativeData = {
        name: fair.representative.name || '',
        title: fair.representative.title_tr || '',
        email: fair.representative.email || '',
        phone: fair.representative.phone || ''
      };
    }
  }

  fairsData[sector].push({
    id: fair.basic_info.name_tr.toLowerCase().replace(/\s+/g, '-'),
    name: fair.basic_info.name_tr,
    date: fair.basic_info.date_tr || fair.basic_info.date || '',
    location: fair.basic_info.location_tr,
    description: fair.basic_info.description_tr || '',
    backgroundImage: fair.visuals?.background_image || '/images/fuarlar-arkaplan.jpg',
    logo: fair.visuals?.logo || '/images/fuarlar-logo.png',
    representative: representativeData,
    hidePhone: fair.representative?.hide_phone || false,
    order: fair.settings?.order ?? 999 // Default high number for unsorted items
  });
});

// Sort fairs within each sector by order
Object.keys(fairsData).forEach(sector => {
  fairsData[sector].sort((a, b) => a.order - b.order);
});

const sectors = Object.keys(fairsData);
console.log('âœ…', currentYear, 'Fairs data converted:', sectors);
console.log('âœ…', currentYear, 'Fairs sorted by order within each sector');
---

<BaseLayout title={`${pageTitle} - TÃ¼rkel FuarcÄ±lÄ±k`} description={`${currentYear} yÄ±lÄ±nda organize edeceÄŸimiz uluslararasÄ± fuarlarÄ±n detaylÄ± takvimi`} locale={locale}>
  <Header locale={locale} />
  
  <main class="pt-8 pb-16">
    <section class="py-16">
      <div class="mx-auto px-5" style="max-width: calc(100% - 20px); background-color: white; border-radius: 10px; margin: 10px auto;">
        <div class="container mx-auto px-4 lg:px-8">
          
          <!-- Section Header -->
          <div class="text-center mb-12">
            <div class="flex items-center justify-center mb-4">
              <h2 class="text-2xl lg:text-3xl font-bold text-gray-900" style="font-family: 'Radio Canada Big', sans-serif;">
                {pageTitle}
              </h2>
            </div>
            <p class="text-lg text-gray-600 max-w-3xl mx-auto" style="font-family: 'Radio Canada Big', sans-serif;">
              {pageDescription}
            </p>
          </div>

          <!-- Filters Section -->
          <div class="mb-12 space-y-4">
            <!-- Sorting Controls -->
            <div class="flex flex-col md:flex-row gap-4 items-center justify-between">
              <!-- Sort Options -->
              <div class="flex flex-wrap gap-2 items-center">
                <span class="text-sm font-medium text-gray-700 mr-2" style="font-family: 'Radio Canada Big', sans-serif;">SÄ±ralama:</span>
                <button class="sort-btn active px-4 py-2 text-xs rounded-lg border border-[#CE1A28] bg-[#CE1A28] text-white transition-all duration-300 hover:bg-[#B01520]" data-sort="order" style="font-family: 'Radio Canada Big', sans-serif;">
                  VarsayÄ±lan
                </button>
                <button class="sort-btn px-4 py-2 text-xs rounded-lg border border-gray-300 text-gray-700 bg-white transition-all duration-300 hover:border-[#CE1A28] hover:text-[#CE1A28]" data-sort="name" style="font-family: 'Radio Canada Big', sans-serif;">
                  A-Z
                </button>
                <button class="sort-btn px-4 py-2 text-xs rounded-lg border border-gray-300 text-gray-700 bg-white transition-all duration-300 hover:border-[#CE1A28] hover:text-[#CE1A28]" data-sort="date" style="font-family: 'Radio Canada Big', sans-serif;">
                  Tarihe GÃ¶re
                </button>
                <button class="sort-clear-btn px-3 py-2 text-xs rounded-lg border border-gray-400 text-gray-500 bg-white transition-all duration-300 hover:border-red-500 hover:text-red-500 hover:bg-red-50" style="font-family: 'Radio Canada Big', sans-serif;" title="SÄ±ralamayÄ± sÄ±fÄ±rla">
                  âœ•
                </button>
              </div>
            </div>
            
            <!-- Sector Filter Buttons -->
            <div class="flex flex-wrap justify-center gap-4">
              <button class="filter-btn active px-6 py-2 rounded-full border-2 border-[#CE1A28] text-[#CE1A28] hover:bg-[#CE1A28] hover:text-white transition-colors font-medium" data-sector="all">
                TÃ¼mÃ¼
              </button>
              {sectors.map(sector => (
                <button class="filter-btn px-6 py-2 rounded-full border-2 border-gray-300 text-gray-700 hover:border-[#CE1A28] hover:text-[#CE1A28] transition-colors font-medium" data-sector={sector}>
                  {sector}
                </button>
              ))}
            </div>
          </div>

          <!-- Fairs Grid -->
          <div class="fairs-container">
            {Object.entries(fairsData).map(([sector, fairs]) => 
              fairs.map((fair) => (
                  <div class="fair-card bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 mb-8" data-sector={sector} data-order={fair.order}>
                    <!-- Fair Image with Logo -->
                    <div class="relative h-64 bg-gradient-to-br from-gray-100 to-gray-300 overflow-hidden">
                      <img 
                        src={fair.backgroundImage || "/images/fuarlar-arkaplan.jpg"} 
                        alt={fair.name}
                        class="w-full h-full object-cover object-center opacity-80"
                        style="min-width: 100%; min-height: 100%;"
                      />
                      <!-- Fair Logo Overlay -->
                      <div class="absolute inset-0 flex items-center justify-center">
                        <div class="bg-white bg-opacity-95 rounded-xl p-4 shadow-lg max-w-[230px]">
                          <img 
                            src={fair.logo || "/images/fuarlar-logo.png"} 
                            alt={`${fair.name} Logo`}
                            class="h-32 w-auto max-w-[260px] object-contain mx-auto"
                            style="filter: hue-rotate(0deg);"
                          />
                        </div>
                      </div>
                    </div>

                    <!-- Fair Details -->
                    <div class="p-6">
                      <!-- Fair Name and Description -->
                      <div class="mb-3">
                        <h3 class="text-xl font-bold text-gray-900" style="font-family: 'Radio Canada Big', sans-serif;">
                          {fair.name}
                        </h3>
                        {fair.description && (
                          <p class="text-sm text-gray-600 font-medium leading-tight -mt-1" style="font-family: 'Radio Canada Big', sans-serif;">
                            {fair.description}
                          </p>
                        )}
                      </div>
                      
                      <!-- Fair Info -->
                      <div class="space-y-2 mb-4">
                        <div class="flex items-center text-sm text-gray-700">
                          <svg class="w-4 h-4 mr-2 text-[#CE1A28]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          </svg>
                          <span class="font-medium">{fair.location}</span>
                        </div>
                        <div class="flex items-center text-sm text-gray-700">
                          <svg class="w-4 h-4 mr-2 text-[#CE1A28]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a4 4 0 118 0v4m-4 6v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z"></path>
                          </svg>
                          <span class="font-medium">{fair.date}</span>
                        </div>
                      </div>

                      <!-- Representative Info -->
                      <div class="border-t border-gray-200 pt-3" style="max-height: 140px !important; overflow: hidden !important;">
                        <p class="text-xs text-gray-500 mb-2 font-semibold">Temsilci Bilgileri:</p>
                        <div class="space-y-1">
                          <div class="flex items-center text-sm">
                            <svg class="w-3 h-3 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="font-semibold text-gray-900">{fair.representative.name}</span>
                          </div>
                          <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-3 h-3 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V8a2 2 0 012-2h2zM8 5a1 1 0 011-1h2a1 1 0 011 1v1H8V5z" clip-rule="evenodd"></path>
                            </svg>
                            <span>{fair.representative.title}</span>
                          </div>
                          <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-3 h-3 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                              <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
                              <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                            </svg>
                            <a href={`mailto:${fair.representative.email}`} class="hover:text-[#CE1A28] transition-colors">
                              {fair.representative.email}
                            </a>
                          </div>
                          {fair.representative.phone && fair.representative.phone.trim() !== '' && !fair.hidePhone && (
                            <div class="flex items-center text-sm text-gray-600">
                              <svg class="w-3 h-3 mr-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
                              </svg>
                              <a href={`tel:${fair.representative.phone}`} class="hover:text-[#CE1A28] transition-colors">
                                {fair.representative.phone}
                              </a>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))
            )}
          </div>
        </div>
      </div>
    </section>
  </main>

  <Footer locale={locale} content={footerContent} />
</BaseLayout>

<style>
  /* Fairs grid layout */
  .fairs-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  /* Desktop: 4 cards per row */
  @media (min-width: 1280px) {
    .fairs-container {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  /* Tablet: 2 cards per row */
  @media (min-width: 768px) and (max-width: 1279px) {
    .fairs-container {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* Standard card dimensions - sabit yÃ¼kseklik */
  .fair-card {
    height: 520px !important;
    min-height: 520px !important;
    max-height: 520px !important;
    display: flex !important;
    flex-direction: column !important;
    margin-bottom: 2rem !important;
  }

  /* Card image section - 200px */
  .fair-card .h-64 {
    height: 200px !important;
    min-height: 200px !important;
    max-height: 200px !important;
    flex-shrink: 0 !important;
  }

  /* Card content section - esnek yÃ¼kseklik */
  .fair-card .p-6 {
    flex: 1 !important;
    display: flex !important;
    flex-direction: column !important;
    padding: 1.5rem !important;
  }

  /* Fair name - esnek yÃ¼kseklik */
  .fair-card h3 {
    font-size: 1.125rem !important;
    line-height: 1.2 !important;
    word-wrap: break-word !important;
    hyphens: auto !important;
  }

  /* Fair description - ince font */
  .fair-card p {
    font-weight: 300 !important;
    font-size: 0.9rem !important;
  }

  /* Representative title - kÄ±rmÄ±zÄ± renk (sadece title) */
  .fair-card .border-t .text-sm:not(a) {
    color: #CE1A28 !important;
    font-weight: 500 !important;
  }

  /* Mail ve telefon linkler normal renk */
  .fair-card .border-t a.text-sm {
    color: #6B7280 !important;
    font-weight: normal !important;
  }

  .fair-card .border-t a.text-sm:hover {
    color: #CE1A28 !important;
  }

  /* Fair info section - sabit yÃ¼kseklik */
  .fair-card .space-y-2 {
    flex-shrink: 0 !important;
    margin-bottom: 1rem !important;
    height: 3rem !important;
  }

  /* Representative section - alt kÄ±sÄ±mda sabit yÃ¼kseklik */
  .fair-card .border-t {
    margin-top: auto !important;
    max-height: 140px !important;
    overflow: hidden !important;
    flex-shrink: 0 !important;
  }

  /* Filter buttons */
  .filter-btn.active {
    background-color: #CE1A28;
    color: white;
    border-color: #CE1A28;
  }

  /* Sort button styles */
  .sort-btn.active {
    background-color: #CE1A28;
    color: white;
    border-color: #CE1A28;
  }
  
  .sort-btn:not(.active):hover {
    border-color: #CE1A28;
    color: #CE1A28;
  }

  /* Mobile responsive */
  @media (max-width: 767px) {
    .fairs-container {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .fair-card {
      height: auto !important;
      min-height: 480px !important;
    }
    
    .fair-card h3 {
      font-size: 1rem !important;
      line-height: 1.3 !important;
    }
  }
</style>

<script>
  // Sector filtering and sorting functionality
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const sortButtons = document.querySelectorAll('.sort-btn');
    const fairCards = document.querySelectorAll('.fair-card');
    const fairsContainer = document.querySelector('.fairs-container');
    
    // Store original fair data for sorting
    const fairsData = [];
    
    // Parse fair data from DOM
    fairCards.forEach(card => {
      const nameElement = card.querySelector('h3');
      const dateElement = card.querySelector('.flex.items-center:nth-child(2) .font-medium');
      
      fairsData.push({
        element: card,
        name: nameElement?.textContent?.trim() || '',
        date: dateElement?.textContent?.trim() || '',
        order: parseInt(card.dataset.order) || 999,
        sector: card.dataset.sector || ''
      });
    });
    
    // Sorting functionality
    function sortFairs(sortType) {
      const sortedFairs = [...fairsData];
      
      switch(sortType) {
        case 'name':
          sortedFairs.sort((a, b) => a.name.localeCompare(b.name, 'tr'));
          break;
        case 'date':
          sortedFairs.sort((a, b) => {
            // Turkish month names to numbers
            const turkishMonths = {
              'OCAK': '01', 'ÅžUBAT': '02', 'MART': '03', 'NÄ°SAN': '04',
              'MAYIS': '05', 'HAZÄ°RAN': '06', 'TEMMUZ': '07', 'AÄžUSTOS': '08',
              'EYLÃœL': '09', 'EKÄ°M': '10', 'KASIM': '11', 'ARALIK': '12'
            };
            
            function parseDate(dateStr) {
              // Handle formats like "17-25 OCAK 2026" or "16 - 18 ÅžUBAT 2026"
              const match = dateStr.match(/(\d{1,2})\s*-\s*\d{1,2}\s+(\w+)\s+(\d{4})/);
              if (match) {
                const day = match[1];
                const month = turkishMonths[match[2]] || '01';
                const year = match[3];
                return new Date(`${year}-${month}-${day.padStart(2, '0')}`);
              }
              return new Date(2099, 11, 31); // Far future date for unparseable dates
            }
            
            const dateA = parseDate(a.date);
            const dateB = parseDate(b.date);
            return dateA - dateB;
          });
          break;
        case 'order':
        default:
          sortedFairs.sort((a, b) => a.order - b.order);
          break;
      }
      
      // Simple reordering without rebuilding structure
      const container = fairsContainer as HTMLElement;
      if (container) {
        // Remove all cards temporarily
        const cardElements = sortedFairs.map((fair: any) => {
          fair.element.remove();
          return fair.element;
        });
        
        // Re-append in sorted order to the main container
        cardElements.forEach((card: any) => {
          container.appendChild(card);
        });
      }
    }
    
    // Sort button functionality
    sortButtons.forEach(button => {
      button.addEventListener('click', function() {
        const sortType = this.dataset.sort;
        
        // Update active button
        sortButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.classList.remove('bg-[#CE1A28]', 'text-white', 'border-[#CE1A28]');
          btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300');
        });
        
        this.classList.add('active');
        this.classList.remove('bg-white', 'text-gray-700', 'border-gray-300');
        this.classList.add('bg-[#CE1A28]', 'text-white', 'border-[#CE1A28]');
        
        // Apply sorting
        sortFairs(sortType);
      });
    });
    
    // Clear sort button functionality
    const clearButton = document.querySelector('.sort-clear-btn');
    if (clearButton) {
      clearButton.addEventListener('click', function() {
        // Reset to original order (by order field)
        sortFairs('order');
        
        // Reset active button to "VarsayÄ±lan"
        sortButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.classList.remove('bg-[#CE1A28]', 'text-white', 'border-[#CE1A28]');
          btn.classList.add('bg-white', 'text-gray-700', 'border-gray-300');
        });
        
        const defaultButton = document.querySelector('[data-sort="order"]');
        if (defaultButton) {
          defaultButton.classList.add('active');
          defaultButton.classList.remove('bg-white', 'text-gray-700', 'border-gray-300');
          defaultButton.classList.add('bg-[#CE1A28]', 'text-white', 'border-[#CE1A28]');
        }
      });
    }
    
    // Filter functionality
    filterButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        const selectedSector = this.dataset.sector;
        
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Show/hide cards based on sector
        fairCards.forEach(card => {
          const cardElement = card as HTMLElement;
          if (selectedSector === 'all' || cardElement.dataset.sector === selectedSector) {
            cardElement.style.display = 'block';
          } else {
            cardElement.style.display = 'none';
          }
        });
      });
    });
  });
</script>
