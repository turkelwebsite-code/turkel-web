---
import { type Locale } from '../lib/i18n';

interface Props {
  locale: Locale;
  title?: string;
  placeholder?: string;
  ctaText?: string;
}

const { 
  locale,
  title = locale === 'tr' ? 'Bültenimize Abone Olun' : 'Subscribe to Our Newsletter',
  placeholder = locale === 'tr' ? 'Mail Adresiniz' : 'Your Email Address',
  ctaText = locale === 'tr' ? 'abone ol' : 'subscribe'
} = Astro.props;
---

<div class="newsletter-form">
  {title && (
    <h3 class="text-2xl font-medium mb-2 text-white">
      {title}
    </h3>
  )}
  
  <p class="text-white/70 text-sm mb-6 leading-relaxed">
    {locale === 'tr' 
      ? 'Fuar haberlerinden ve özel tekliflerden haberdar olmak için e-posta listemize katılın.'
      : 'Join our email list to stay updated on fair news and special offers.'
    }
  </p>

  <form 
    id="newsletter-form"
    class="flex flex-col sm:flex-row gap-3"
  >
    <!-- Hidden fields -->
    <input type="hidden" name="form-type" value="newsletter" />
    <input type="hidden" name="language" value={locale} />
    
    <div class="flex-1">
      <input
        type="email"
        name="email"
        placeholder={placeholder}
        required
        class="w-full px-6 py-4 rounded-full bg-white/10 border border-white/20 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all"
      />
    </div>
    
    <button
      type="submit"
      class="btn btn-primary px-8 py-4 rounded-full font-semibold tracking-wide hover:bg-primary-dark transition-all"
    >
      {ctaText}
    </button>
  </form>

  <!-- Success/Error Messages -->
  <div id="newsletter-message" class="mt-4 text-sm hidden">
    <div id="newsletter-success" class="text-green-400 hidden">
      {locale === 'tr' 
        ? 'Teşekkürler! E-posta adresiniz başarıyla kaydedildi.'
        : 'Thank you! Your email has been successfully registered.'
      }
    </div>
    <div id="newsletter-error" class="text-red-400 hidden">
      {locale === 'tr'
        ? 'Bir hata oluştu. Lütfen tekrar deneyin.'
        : 'An error occurred. Please try again.'
      }
    </div>
  </div>
</div>

<script>
  // Newsletter form submission
  const form = document.getElementById('newsletter-form') as HTMLFormElement;
  const messageDiv = document.getElementById('newsletter-message');
  const successDiv = document.getElementById('newsletter-success');
  const errorDiv = document.getElementById('newsletter-error');
  
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const email = formData.get('email') as string;
      
      // Basic email validation
      if (!email || !/.+@.+\..+/.test(email)) {
        showError();
        return;
      }
      
      try {
        // Submit to Netlify
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData as any).toString()
        });
        
        if (response.ok) {
          showSuccess();
          form.reset();
        } else {
          showError();
        }
      } catch (error) {
        console.error('Newsletter subscription error:', error);
        showError();
      }
    });
  }
  
  function showSuccess() {
    if (messageDiv && successDiv && errorDiv) {
      messageDiv.classList.remove('hidden');
      successDiv.classList.remove('hidden');
      errorDiv.classList.add('hidden');
      
      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 5000);
    }
  }
  
  function showError() {
    if (messageDiv && successDiv && errorDiv) {
      messageDiv.classList.remove('hidden');
      errorDiv.classList.remove('hidden');
      successDiv.classList.add('hidden');
      
      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 5000);
    }
  }
</script>
