---
import { type Locale } from '../lib/i18n';

interface Props {
  locale: Locale;
  content: {
    title: string;
    description?: string;
    governmentText?: string;
    kosgebText?: string;
  };
}

const { locale, content } = Astro.props;

// Government support logos
const supportLogos = [
  {
    name: 'T.C. Cumhurbaşkanlığı',
    src: '/images/ticaretbakanligi.png',
    width: 200,
    height: 120
  },
  {
    name: 'Türkiye Mavi',
    src: '/images/turkiyemavi.png',
    width: 200,
    height: 120
  },
  {
    name: 'KOSGEB',
    src: '/images/kosgeb.png',
    width: 200,
    height: 120
  },
  {
    name: 'TF Tur',
    src: '/images/tftur.png',
    width: 200,
    height: 120
  }
];
---

<section class="fair-support py-20 relative fair-support-container">
  <div class="mx-auto px-5 relative z-10" style="max-width: 1680px; margin: 20px auto;">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-12 lg:gap-16 items-start">
      
      <!-- Left Content -->
      <div class="lg:col-span-7">
        <!-- Section Header -->
        <div class="flex items-center gap-1 mb-4">
          <div class="flex items-center">
            <img src="/images/turkel-icon-black.svg" alt="Türkel Icon" class="w-12 h-12" style="width: 48px !important; height: 48px !important; min-width: 48px; min-height: 48px; display: block !important;" />
          </div>
          <h2 class="text-base font-semibold text-[#CE1A28] uppercase tracking-[10%] font-['Radio_Canada_Big']">
            {locale === 'tr' ? 'Fuar desteği' : 'Fair Support'}
          </h2>
        </div>

        <!-- Main Title -->
        <h3 class="text-[42px] font-bold text-[#16243D] mb-8 leading-[1.15] max-w-[597px] font-['Radio_Canada_Big'] tracking-[-0.02em]">
          {content.title}
        </h3>

        <!-- Description -->
        {content.description && (
          <p class="text-lg lg:text-xl text-text-primary mb-8 leading-relaxed">
            {content.description}
          </p>
        )}

        <!-- Government Support Text -->
        {content.governmentText && (
          <div class="mb-8">
            <div class="w-full h-px bg-gray-border mb-6"></div>
            <p class="text-text-secondary leading-relaxed">
              {content.governmentText}
            </p>
          </div>
        )}

        <!-- KOSGEB Text -->
        {content.kosgebText && (
          <div>
            <div class="w-full h-px bg-gray-border mb-6"></div>
            <p class="text-text-secondary leading-relaxed">
              {content.kosgebText}
            </p>
          </div>
        )}
      </div>

      <!-- Right Content - Support Logos -->
      <div class="lg:col-span-5 mt-16">
        <div class="bg-background-light rounded-lg p-8">
          <div class="grid grid-cols-2 gap-8 items-center">
            {supportLogos.map((logo, index) => (
              <div 
                class="support-logo flex items-center justify-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300"
                style={`animation-delay: ${index * 0.2}s`}
              >
                <img 
                  src={logo.src}
                  alt={logo.name}
                  width={logo.width}
                  height={logo.height}
                  class="max-w-full max-h-20 object-contain"
                  loading="lazy"
                />
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .fair-support-container {
    position: relative !important;
  }
  
  .fair-support-container::before {
    content: '' !important;
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    width: 100% !important;
    height: 100% !important;
    background-image: url('/images/dotted-arrow-dark.png') !important;
    background-repeat: no-repeat !important;
    background-size: contain !important;
    background-position: center !important;
    opacity: 0.6 !important;
    z-index: 1 !important;
    display: block !important;
    pointer-events: none !important;
    background-color: rgba(200, 200, 200, 0.1) !important; /* Hafif gri test */
  }
  

  
  .fair-support-container > * {
    position: relative;
    z-index: 2;
  }
  
  .support-logo {
    opacity: 0;
    transform: translateY(20px);
  }
  
  .support-logo.animate {
    animation: fadeInUp 0.6s ease-out forwards;
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Debug: Check all images visibility
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🔍 DEBUG: All Images Visibility Check...');
    
    // Test all images on page
    const images = [
      '/images/dotted-arrow-dark.png',
      '/images/instagram-post.jpg',
      '/images/homedeco-slider.png',
      '/images/homedeco-logo.png',
      '/images/turkel-logo-01.svg',
      '/images/turkel-icon-black.svg'
    ];
    
    images.forEach(src => {
      const img = new Image();
      img.onload = () => {
        console.log(`✅ ${src} loaded successfully (${img.width}x${img.height})`);
      };
      img.onerror = () => {
        console.error(`❌ ${src} failed to load`);
      };
      img.src = src;
    });
    
    // Check dotted arrow background
    const fairSupportContainer = document.querySelector('.fair-support-container');
    if (fairSupportContainer) {
      const computedStyle = window.getComputedStyle(fairSupportContainer, '::before');
      console.log('🎨 Background Image:', computedStyle.backgroundImage);
      console.log('🎨 Opacity:', computedStyle.opacity);
    }
    
    // Check all img elements on page
    setTimeout(() => {
      const allImgs = document.querySelectorAll('img');
      console.log(`📷 Found ${allImgs.length} img elements on page:`);
      allImgs.forEach((img, index) => {
        console.log(`${index + 1}. ${img.src} - ${img.complete ? 'loaded' : 'loading'} - ${img.naturalWidth}x${img.naturalHeight}`);
      });
    }, 2000);
  });

  // Intersection Observer for support logo animations
  const observerOptions = {
    threshold: 0.3,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate');
      }
    });
  }, observerOptions);
  
  // Observe all support logos
  document.addEventListener('DOMContentLoaded', () => {
    const supportLogos = document.querySelectorAll('.support-logo');
    supportLogos.forEach((logo) => {
      observer.observe(logo);
    });
  });
</script>
