---
interface Partner {
  name: string;
  logo: string;
  website?: string;
  featured?: boolean;
}

interface Props {
  partners: Partner[];
  title?: string;
}

const { partners, title } = Astro.props;
---

<section class="partners-section py-16 bg-background-light">
  <div class="mx-auto px-5" style="max-width: calc(100% - 20px); background-color: white; border-radius: 10px; margin: 20px auto;">
    {title && (
      <div class="text-center mb-12">
        <div class="inline-flex items-center gap-4 mb-4">
          <div class="w-5 h-4 bg-primary opacity-40 rounded-sm"></div>
          <div class="w-5 h-4 bg-primary opacity-60 rounded-sm"></div>
          <div class="w-5 h-4 bg-primary rounded-sm"></div>
        </div>
        <h2 class="text-[28px] sm:text-[32px] font-bold text-primary uppercase tracking-[0.15em] font-['Radio_Canada_Big'] leading-tight">
          {title}
        </h2>
      </div>
    )}

    <!-- Partners Slider -->
    <div class="partners-slider-container relative overflow-hidden cursor-grab" id="slider-container">
      <!-- Navigation Arrows -->
      <button 
        class="slider-arrow slider-arrow-left absolute left-4 top-1/2 transform -translate-y-1/2 z-10 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg transition-all duration-300 opacity-0"
        id="prev-btn"
        aria-label="Ã–nceki partner"
      >
        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <button 
        class="slider-arrow slider-arrow-right absolute right-4 top-1/2 transform -translate-y-1/2 z-10 bg-white/90 hover:bg-white rounded-full p-3 shadow-lg transition-all duration-300 opacity-0"
        id="next-btn"
        aria-label="Sonraki partner"
      >
        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Slider Track -->
      <div class="partners-slider-track flex transition-transform duration-500 ease-in-out group" id="partners-track">
        {partners.map((partner, index) => (
          <div class="partner-slide flex-shrink-0 w-1/3 px-4">
            <div class="partner-item flex items-center justify-center p-12 h-48 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 group">
              <img 
                src={partner.logo}
                alt={partner.name}
                class="max-w-full max-h-full object-contain hover:scale-105 transition-all duration-300"
                loading="lazy"
                width="300"
                height="180"
              />
            </div>
          </div>
        ))}
      </div>

      <!-- Navigation Dots -->
      <div class="flex justify-center mt-8 gap-2" id="partners-dots">
        <!-- Dots will be generated by JavaScript -->
      </div>
    </div>
  </div>
</section>

<style>
  .partners-slider-container {
    max-width: 100%;
  }
  
  .partners-slider-container:hover .slider-arrow {
    opacity: 1;
  }
  
  .partners-slider-container.dragging {
    cursor: grabbing;
  }
  
  .partners-slider-container.dragging .partners-slider-track {
    transition: none;
  }
  
  .partners-slider-track {
    will-change: transform;
    backface-visibility: hidden;
  }
  
  .partner-slide {
    min-width: 33.333333%; /* w-1/3 */
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  
  .partner-item {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease-out forwards;
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Arrow styling */
  .slider-arrow {
    transition: opacity 0.3s ease, background-color 0.2s ease;
    will-change: opacity;
  }
  
  .slider-arrow:hover {
    background-color: white;
  }
  
  .slider-arrow:active {
    background-color: #f3f4f6;
  }
  
  /* Dots styling */
  .slider-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #d1d5db;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .slider-dot.active {
    background-color: #CE1A28;
    transform: scale(1.2);
  }
  
  .slider-dot:hover {
    background-color: #9ca3af;
  }
  
  .slider-dot.active:hover {
    background-color: #b91c1c;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .partner-slide {
      min-width: 50%; /* 2 items on mobile */
    }
  }
  
  @media (max-width: 480px) {
    .partner-slide {
      min-width: 100%; /* 1 item on small mobile */
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.getElementById('partners-track');
    const dotsContainer = document.getElementById('partners-dots');
    const sliderContainer = document.getElementById('slider-container');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (!track || !dotsContainer || !sliderContainer) return;
    
    const slides = track.querySelectorAll('.partner-slide');
    const totalSlides = slides.length;
    
    // Calculate how many slides to show at once (3 on desktop, 2 on tablet, 1 on mobile)
    const getSlidesPerView = () => {
      if (window.innerWidth >= 768) return 3;
      if (window.innerWidth >= 480) return 2;
      return 1;
    };
    
    let slidesPerView = getSlidesPerView();
    let currentSlide = 0;
    let maxSlide = Math.max(0, totalSlides - slidesPerView);
    let autoSlideInterval;
    
    // Mouse drag variables
    let isDragging = false;
    let startX = 0;
    let currentX = 0;
    let initialTransform = 0;
    
    // Create dots
    const createDots = () => {
      dotsContainer.innerHTML = '';
      
      for (let i = 0; i <= maxSlide; i++) {
        const dot = document.createElement('div');
        dot.className = `slider-dot ${i === 0 ? 'active' : ''}`;
        dot.addEventListener('click', () => goToSlide(i));
        dotsContainer.appendChild(dot);
      }
    };
    
    // Update slider position
    const updateSlider = () => {
      const translateX = -(currentSlide * (100 / slidesPerView));
      // Use translate3d for hardware acceleration
      track.style.transform = `translate3d(${translateX}%, 0, 0)`;
      
      // Update dots
      const dots = dotsContainer.querySelectorAll('.slider-dot');
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentSlide);
      });
    };
    
    // Go to specific slide
    const goToSlide = (slideIndex) => {
      currentSlide = Math.max(0, Math.min(slideIndex, maxSlide));
      updateSlider();
      resetAutoSlide();
    };
    
    // Previous slide
    const prevSlide = () => {
      currentSlide = currentSlide <= 0 ? maxSlide : currentSlide - 1;
      updateSlider();
    };
    
    // Next slide
    const nextSlide = () => {
      currentSlide = currentSlide >= maxSlide ? 0 : currentSlide + 1;
      updateSlider();
    };
    
    // Mouse drag functionality
    const handleDragStart = (e) => {
      // Prevent dragging on buttons and dots
      if (e.target.closest('.slider-arrow') || e.target.closest('.slider-dot')) {
        return;
      }
      
      isDragging = true;
      startX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
      currentX = startX;
      initialTransform = -(currentSlide * (100 / slidesPerView));
      sliderContainer.classList.add('dragging');
      stopAutoSlide();
      
      // Prevent text selection during drag
      document.body.style.userSelect = 'none';
    };
    
    const handleDragMove = (e) => {
      if (!isDragging) return;
      e.preventDefault();
      
      currentX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
      const deltaX = currentX - startX;
      
      // Limit drag distance to prevent excessive movement
      const maxDrag = sliderContainer.offsetWidth * 0.5;
      const limitedDeltaX = Math.max(-maxDrag, Math.min(maxDrag, deltaX));
      
      const dragPercentage = (limitedDeltaX / sliderContainer.offsetWidth) * 100;
      const newTransform = initialTransform + dragPercentage;
      
      // Apply transform with hardware acceleration
      track.style.transform = `translate3d(${newTransform}%, 0, 0)`;
    };
    
    const handleDragEnd = (e) => {
      if (!isDragging) return;
      
      isDragging = false;
      sliderContainer.classList.remove('dragging');
      
      // Restore text selection
      document.body.style.userSelect = '';
      
      const deltaX = currentX - startX;
      const threshold = sliderContainer.offsetWidth * 0.15; // 15% threshold for better UX
      
      // Determine slide direction based on drag distance and velocity
      if (Math.abs(deltaX) > threshold) {
        if (deltaX > 0 && currentSlide > 0) {
          prevSlide();
        } else if (deltaX < 0 && currentSlide < maxSlide) {
          nextSlide();
        } else {
          updateSlider(); // Snap back to current position
        }
      } else {
        updateSlider(); // Snap back to current position
      }
      
      resetAutoSlide();
    };
    
    // Auto slide functionality
    const startAutoSlide = () => {
      autoSlideInterval = setInterval(nextSlide, 4000); // 4 seconds
    };
    
    const stopAutoSlide = () => {
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
        autoSlideInterval = null;
      }
    };
    
    const resetAutoSlide = () => {
      stopAutoSlide();
      startAutoSlide();
    };
    
    // Handle window resize
    const handleResize = () => {
      const newSlidesPerView = getSlidesPerView();
      if (newSlidesPerView !== slidesPerView) {
        slidesPerView = newSlidesPerView;
        maxSlide = Math.max(0, totalSlides - slidesPerView);
        currentSlide = Math.min(currentSlide, maxSlide);
        createDots();
        updateSlider();
      }
    };
    
    // Event listeners
    
    // Arrow buttons
    if (prevBtn) prevBtn.addEventListener('click', () => { prevSlide(); resetAutoSlide(); });
    if (nextBtn) nextBtn.addEventListener('click', () => { nextSlide(); resetAutoSlide(); });
    
    // Mouse drag events
    sliderContainer.addEventListener('mousedown', handleDragStart);
    document.addEventListener('mousemove', handleDragMove);
    document.addEventListener('mouseup', handleDragEnd);
    
    // Touch drag events
    sliderContainer.addEventListener('touchstart', handleDragStart, { passive: false });
    document.addEventListener('touchmove', handleDragMove, { passive: false });
    document.addEventListener('touchend', handleDragEnd);
    
    // Pause auto slide on hover
    sliderContainer.addEventListener('mouseenter', stopAutoSlide);
    sliderContainer.addEventListener('mouseleave', startAutoSlide);
    
    // Handle window resize
    window.addEventListener('resize', handleResize);
    
    // Prevent context menu on drag
    sliderContainer.addEventListener('contextmenu', (e) => {
      if (isDragging) e.preventDefault();
    });
    
    // Initialize
    createDots();
    updateSlider();
    startAutoSlide();
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', stopAutoSlide);
  });
</script>
